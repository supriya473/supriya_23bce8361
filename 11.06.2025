db.products.find(
  { price: { $gte: 700, $lte: 900 } },
  { _id: 0, name: 1, price: 1 }
)


package connection;

import org.bson.Document;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.FindIterable;
import static com.mongodb.client.model.Sorts.descending;

public class  MongoDB {
    public static void main(String[] args) {
        // Connect to MongoDB server
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

        // Get the database
        MongoDatabase database = mongoClient.getDatabase("vitap");

        // Get the collection
        MongoCollection<Document> collection = database.getCollection("products");

        // Query with price filter and apply descending sort on "First_Name"
        FindIterable<Document> products = collection
            .find(new Document("price", new Document("$gte", 700).append("$lte", 900)))
            .sort(descending("First_Name"));

        // Print the sorted documents
        for (Document document : products) {
            System.out.println(document.toJson());
        }

        // Close the connection
        mongoClient.close();
    }
}

db.sales.aggregate([
  {
    $group: {
      _id: { item: "$item", size: "$size" },
      maxPrice: { $max: "$price" }
    }
  },
  {
    $sort: { "_id.item": 1, "maxPrice": -1 }
  },
  {
    $group: {
      _id: "$_id.item",
      sizeWithMaxPrice: { $first: "$_id.size" },
      maxPrice: { $first: "$maxPrice" }
    }
  }
])

package connection;

import org.bson.Document;
import com.mongodb.client.*;
import java.util.Arrays;
import java.util.List;

public class MaxPricePerItem {
    public static void main(String[] args) {
        // Connect to MongoDB server
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

        // Get the database and collection
        MongoDatabase database = mongoClient.getDatabase("test");
        MongoCollection<Document> collection = database.getCollection("sales");

        // Define the aggregation pipeline
        List<Document> pipeline = Arrays.asList(
            // Stage 1: Group by item and size, get max price for each group
            new Document("$group", new Document("_id", new Document("item", "$item").append("size", "$size"))
                                        .append("maxPrice", new Document("$max", "$price"))),
            
            // Stage 2: Sort by item and maxPrice descending
            new Document("$sort", new Document("_id.item", 1).append("maxPrice", -1)),
            
            // Stage 3: Group by item, take the first (highest) maxPrice
            new Document("$group", new Document("_id", "$_id.item")
                                        .append("sizeWithMaxPrice", new Document("$first", "$_id.size"))
                                        .append("maxPrice", new Document("$first", "$maxPrice")))
        );

        // Run the aggregation
        AggregateIterable<Document> result = collection.aggregate(pipeline);

        // Print the results
        for (Document doc : result) {
            System.out.println(doc.toJson());
        }

        // Close the connection
        mongoClient.close();
    }
}


